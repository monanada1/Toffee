import java.util.*;

class User {
    private String email;
    private String password;

    // Constructor
    public User(String email, String password) {
        this.email = email;
        this.password = password;
    }

    // Getters and setters
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
     public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

class Customer {
    private String name;
    private String address;
    private int loyaltyPoints;
    private Cart cart;
    private List<Order> orderHistory;

    // Constructor
    public Customer(String name, String address) {
        this.name = name;
        this.address = address;
        this.loyaltyPoints = 0;
        this.cart = new Cart();
        this.orderHistory = new ArrayList<>();
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public int getLoyaltyPoints() {
        return loyaltyPoints;
    }
    public void setLoyaltyPoints(int loyaltyPoints) {
        this.loyaltyPoints = loyaltyPoints;
    }

    public Cart getCart() {
        return cart;
    }

    public void addToCart(Item item) {

        cart.addItem(item);
    }

    public void removeFromCart(Item item) {
        cart.removeItem(item);
    }

    public List<Order> getOrderHistory() {
        return orderHistory;
    }

    public void addOrderToHistory(Order order) {
        orderHistory.add(order);
    }
}

class Admin {
    // Add fields and methods specific to the Admin class
}

class Cart {
    private List<Item> items;

    // Constructor
    public Cart() {
        items = new ArrayList<>();
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void removeItem(Item item) {
        items.remove(item);
    }
     public double calculateTotalCost() {
        double totalCost = 0.0;
        for (Item item : items) {
            totalCost += item.getPrice();
        }
        return totalCost;
    }

    public List<Item> getItems() {
        return items;
    }
}

class Catalog {
    private List<Item> items;

    // Constructor
    public Catalog() {
        items = new ArrayList<>();
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void removeItem(Item item) {
        items.remove(item);
    }

    // Add other methods as needed
}

class Order {
    private Date date;
    private double totalPrice;
    private String shippingAddress;
    private List<Item> items;
    private Payment payment;

    // Constructor
    public Order(double totalPrice, String shippingAddress, List<Item> items, Payment payment) {
        this.date = new Date();
        this.totalPrice = totalPrice;
        this.shippingAddress = shippingAddress;
        this.items = items;
        this.payment = payment;
    }

    // Getters and setters
    public Date getDate() {
        return date;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public String getShippingAddress() {
        return shippingAddress;
    }

    public List<Item> getItems() {
        return items;
    }

    public Payment getPayment() {
        return payment;
    }
}
class GiftVoucher {
    private String code;

}
class Item {
    private String name;
    private double price;

    // Constructor
    public Item(String name, double price) {
        this.name = name;
        this.price = price;
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
class Payment {
    private double amount;
    private String paymentMethod;

    // Constructor
    public Payment(double amount, String paymentMethod) {
        this.amount = amount;
        this.paymentMethod = paymentMethod;
    }

    // Getters and setters
    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }
}
public class Main {
    public static void main(String[] args) {
        // Create a new customer
        Customer customer = new Customer("John Doe", "123 Main St");
        // Create a new item
        Item item = new Item("New item", 9.99);
        // Add the item to the customer's cart
        customer.addToCart(item);
        // Create a new order
        Order order = new Order(customer.getCart().calculateTotalCost(), customer.getAddress(), customer.getCart().getItems(), new Payment(customer.getCart().calculateTotalCost(), "Credit card"));
        // Add the order to the customer's order history
        customer.addOrderToHistory(order);
        string num="0123456789";
        int len=6;
        char[]otp=new char[len];
        Random r=new Random();
        for(int i=0;i<len;i++){
            otp[i]=num.charAt(r.nextInt(num length()));
        }
        System.out.println("Otp:"new string(otp));
        // Print the customer's order history
        System.out.println("Customer's order history:");
        for (Order o : customer.getOrderHistory()) {
            System.out.println("Order date: " + o.getDate());
            System.out.println("Order total price: " + o.getTotalPrice());
            System.out.println("Order shipping address: " + o.getShippingAddress());
            System.out.println("Order items: ");
            for (Item i : o.getItems()) {
                System.out.println("Item name: " + i.getName());
                System.out.println("Item price: " + i.getPrice());
            }
            System.out.println("Order payment: ");
            System.out.println("Payment amount: " + o.getPayment().getAmount());
            System.out.println("Payment method: " + o.getPayment().getPaymentMethod());
        }
    }
}
